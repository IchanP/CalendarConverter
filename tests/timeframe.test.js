import { TimeFrame } from '../src/TemporalConverter/TimeFrame'

describe('timeframe-class-test', () => {
  test('should throw when passed incorrect type as name argument', () => {
    expect(() => new TimeFrame(false, 0, 0, 1, 10)).toThrow('Expected paramater to be of type string, got ' + typeof false)
    expect(() => new TimeFrame(true, 0, 0, 1, 10)).toThrow('Expected paramater to be of type string, got ' + typeof true)
    expect(() => new TimeFrame(0, 0, 0, 1, 10)).toThrow('Expected paramater to be of type string, got ' + typeof 0)
    expect(() => new TimeFrame({}, 0, 0, 10, 11)).toThrow('Expected paramater to be of type string, got ' + typeof {})
    expect(() => new TimeFrame([], 0, 0, 9, 10)).toThrow('Expected paramater to be of type string, got ' + typeof [])
  })
  test('should throw when passed incorrect type as startyear and endyear arguments', () => {
    expect(() => new TimeFrame('Showa', null, 0, 9, 10)).toThrow('Expected number as argument but received ' + typeof null)
    expect(() => new TimeFrame('Showa', false, 0, 8, 10)).toThrow('Expected number as argument but received ' + typeof false)
    expect(() => new TimeFrame('Showa', true, 0, 8, 10)).toThrow('Expected number as argument but received ' + typeof true)
    expect(() => new TimeFrame('Showa', {}, 0, 7, 10)).toThrow('Expected number as argument but received ' + typeof {})
    expect(() => new TimeFrame('Showa', [], 0, 6, 10)).toThrow('Expected number as argument but received ' + typeof [])
    expect(() => new TimeFrame('Showa', '', 0, 5, 9)).toThrow('Expected number as argument but received ' + typeof '')
    expect(() => new TimeFrame('Showa', 0, null, 4, 5)).toThrow('Expected number as argument but received ' + typeof null)
    expect(() => new TimeFrame('Showa', 0, false, 9, 10)).toThrow('Expected number as argument but received ' + typeof false)
    expect(() => new TimeFrame('Showa', 0, true, 9, 10)).toThrow('Expected number as argument but received ' + typeof true)
    expect(() => new TimeFrame('Showa', 0, {}, 9, 10)).toThrow('Expected number as argument but received ' + typeof {})
    expect(() => new TimeFrame('Showa', 0, [], 9, 10)).toThrow('Expected number as argument but received ' + typeof [])
    expect(() => new TimeFrame('Showa', 0, '', 9, 10)).toThrow('Expected number as argument but received ' + typeof '')
    expect(() => new TimeFrame('Showa', '', '', 9, 10)).toThrow('Expected number as argument but received ' + typeof '')
    expect(() => new TimeFrame('Showa', false, false, 9, 10)).toThrow('Expected number as argument but received ' + typeof false)
    expect(() => new TimeFrame('Showa', {}, {}, 9, 10)).toThrow('Expected number as argument but received ' + typeof {})
    expect(() => new TimeFrame('Showa', [], [], 9, 10)).toThrow('Expected number as argument but received ' + typeof [])
  })
  test('should throw when passed incorrect type as startmonth and endmonth as arguments', () => {
    expect(() => new TimeFrame('Showa', 0, 0, '', '')).toThrow('Expected number as argument but received ' + typeof '')
    expect(() => new TimeFrame('Showa', 0, 0, 9, '')).toThrow('Expected number as argument but received ' + typeof '')
    expect(() => new TimeFrame('Showa', 0, 0, '', 9)).toThrow('Expected number as argument but received ' + typeof '')
    expect(() => new TimeFrame('Showa', 0, 0, null, null)).toThrow('Expected number as argument but received ' + typeof null)
    expect(() => new TimeFrame('Showa', 0, 0, 9, null)).toThrow('Expected number as argument but received ' + typeof null)
    expect(() => new TimeFrame('Showa', 0, 0, null, 9)).toThrow('Expected number as argument but received ' + typeof null)
    expect(() => new TimeFrame('Showa', 0, 0, true, true)).toThrow('Expected number as argument but received ' + typeof true)
    expect(() => new TimeFrame('Showa', 0, 0, 9, true)).toThrow('Expected number as argument but received ' + typeof true)
    expect(() => new TimeFrame('Showa', 0, 0, true, 9)).toThrow('Expected number as argument but received ' + typeof true)
    expect(() => new TimeFrame('Showa', 0, 0, [], [])).toThrow('Expected number as argument but received ' + typeof [])
    expect(() => new TimeFrame('Showa', 0, 0, 9, [])).toThrow('Expected number as argument but received ' + typeof [])
    expect(() => new TimeFrame('Showa', 0, 0, [], 9)).toThrow('Expected number as argument but received ' + typeof [])
  })
  test('should throw when passed an out of range value as startmonth and endmonth', () => {
    expect(() => new TimeFrame('Showa', 0, 0, 1, 13)).toThrow('Expected month to be between 1 and 12, received ' + 13)
    expect(() => new TimeFrame('Showa', 0, 0, 13, 0)).toThrow('Expected month to be between 1 and 12, received ' + 13)
    expect(() => new TimeFrame('Showa', 0, 0, 0, 10)).toThrow('Expected month to be between 1 and 12, received ' + 0)
    expect(() => new TimeFrame('Showa', 0, 0, 10, 0)).toThrow('Expected month to be between 1 and 12, received ' + 0)
    expect(() => new TimeFrame('Showa', 0, 0, -1, 1)).toThrow('Expected month to be between 1 and 12, received ' + -1)
    expect(() => new TimeFrame('Showa', 0, 0, 1, -1)).toThrow('Expected month to be between 1 and 12, received ' + -1)
    expect(() => new TimeFrame('Showa', 0, 0, 1, -13)).toThrow('Expected month to be between 1 and 12, received ' + -13)
    expect(() => new TimeFrame('Showa', 0, 0, -13, 1)).toThrow('Expected month to be between 1 and 12, received ' + -13)
  })
})
